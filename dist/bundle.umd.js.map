{"version":3,"file":"bundle.umd.js","sources":["../src/core/dataStore.js","../src/userBehavior/click.js","../src/userBehavior/index.js","../src/index.js","../src/core/utils.js","../src/performance/index.js"],"sourcesContent":["// 全局数据集合管理\r\n\r\n// 设计全局数据\r\nconst dataStore = {\r\n  activeDataSets: {}, // 正在统计的子数据集，内部会有更详细的业务维度\r\n  deviceInfo: {}, //设备信息\r\n  globalData: {},\r\n};\r\n\r\n// 创建一个子数据集\r\nexport function createDataSet(id) {\r\n  dataStore.activeDataSets[id] = {\r\n    id,\r\n    startTime: Date.now(),\r\n    performanceMetrics: [], //性能指标\r\n    userActions: [], //用户行为\r\n    customData: [], //业务字段\r\n  };\r\n}\r\n\r\n// 获取子数据集的方法\r\nexport function getDataSet(id) {\r\n  return dataStore.activeDataSets[id];\r\n}\r\n\r\n// 删除子数据集的方法\r\nexport function deleteDataSet(id) {\r\n  const data = dataStore.activeDataSets[id];\r\n  delete dataStore.activeDataSets[id];\r\n  // console.log(\"成功删除信息\", data, dataStore.activeDataSets);\r\n  return data;\r\n}\r\n\r\n// 更新子数据集的方法\r\nexport function updateDataSet(id, key, callback) {\r\n  // console.log(\"更新数据\", id, key, callback);\r\n  const dataSet = getDataSet(id);\r\n  if (dataSet) {\r\n    dataSet[key] = callback(dataSet[key]);\r\n  }\r\n}\r\n\r\n// 获取全局数据的方法\r\nexport function getGlobalData() {\r\n  return dataStore.globalData;\r\n}\r\n\r\n// 更新全局数据的方法\r\nexport function updateGlobalData(key, value) {\r\n  dataStore.globalData[key] = value;\r\n}\r\n","import { updateDataSet } from \"../core/dataStore\";\r\n\r\n// 节流储存\r\nconst recentClick = new Map();\r\n\r\nexport function trackClick(dataSetId) {\r\n  const handleClick = (event) => {\r\n    let target = event.target;\r\n    // 获取当前节点，开始冒泡，查看是否包含observer-click属性\r\n    while (target) {\r\n      if (target.hasAttribute(\"observer-click\")) {\r\n        break;\r\n      }\r\n      target = target.parentElement;\r\n    }\r\n\r\n    if (!target) {\r\n      return;\r\n    }\r\n    const observerClickValue = target.getAttribute(\"observer-click\");\r\n    const now = Date.now();\r\n    // 节流\r\n    if (recentClick.has(observerClickValue)) {\r\n      const lastTime = recentClick.get(observerClickValue);\r\n      if (now - lastTime < 3000) {\r\n        return;\r\n      }\r\n    }\r\n    // 更新节流时间\r\n    recentClick.set(observerClickValue, now);\r\n    console.log(\"记录本次点击\", observerClickValue);\r\n    // 支持传参(用户传入自定义对象)\r\n    const params = target.getAttribute(\"observer-click-data\");\r\n    // 自定义参数\r\n    let clickUploadData = {};\r\n    if (params) {\r\n      try {\r\n        clickUploadData = JSON.parse(params);\r\n      } catch (error) {\r\n        console.error(\"解析自定义参数失败\", target, error);\r\n      }\r\n    }\r\n\r\n    // 记录\r\n    const action = {\r\n      id: observerClickValue,\r\n      type: \"click\",\r\n      target: event.target.tagName,\r\n      timestamp: Date.now(),\r\n      position: {\r\n        x: event.clientX,\r\n        y: event.clientY,\r\n      },\r\n      clickUploadData,\r\n    };\r\n    console.log(\"记录本次点击\", action);\r\n    // TODO：可能存在的问题：如果已经存在相同id的action，则会被覆盖，例如同一个地方点击多次，那只会记录一下，后续修改数据结构\r\n    updateDataSet(dataSetId, \"userActions\", (actions = []) => [\r\n      ...actions,\r\n      action,\r\n    ]);\r\n  };\r\n  //   添加事件监听器\r\n  document.addEventListener(\"click\", handleClick);\r\n\r\n  return () => {\r\n    document.removeEventListener(\"click\", handleClick);\r\n    recentClick.clear(); // 清空最近点击记录\r\n  };\r\n}\r\n","import { trackClick } from \"./click\";\r\n\r\nexport function initBehaviorTracking(dataSetId) {\r\n  const stopClickTracking = trackClick(dataSetId);\r\n\r\n  return () => {\r\n    stopClickTracking();\r\n  };\r\n}\r\n","import { generateUniqueId } from \"./core/utils\";\r\nimport { collectPerformanceMetrics } from \"./performance/index\";\r\nimport { updateDataSet, createDataSet, deleteDataSet } from \"./core/dataStore\";\r\nimport { initBehaviorTracking } from \"./userBehavior/index\";\r\nimport config from \"./config\";\r\n\r\n// 用户行为全部终止的命令集\r\nlet stopBehaviorTracking = null;\r\n\r\nexport function start() {\r\n  const id = generateUniqueId();\r\n  createDataSet(id);\r\n\r\n  if (config.enablePerformanceTracking) {\r\n    const metrics = collectPerformanceMetrics();\r\n    updateDataSet(id, \"performanceMetrics\", () => {\r\n      // 性能指标可能存在多次收集，所以需要合并\r\n      return [metrics];\r\n    });\r\n  }\r\n  if (config.enableBehaviorTracking) {\r\n    stopBehaviorTracking = initBehaviorTracking(id);\r\n  }\r\n\r\n  return id;\r\n}\r\n\r\nexport function stop(dataSetId) {\r\n  const data = deleteDataSet(dataSetId);\r\n  if (stopBehaviorTracking) {\r\n    stopBehaviorTracking();\r\n  }\r\n  return data;\r\n}\r\n","// 工具函数定义\r\n\r\n// 生成唯一ID\r\nexport function generateUniqueId() {\r\n  return `id-${Date.now()}-${Math.random().toString(16).substring(2)}`;\r\n}\r\n\r\n","// 收集性能指标\r\nexport function collectPerformanceMetrics() {\r\n  const metrics = {};\r\n\r\n  try {\r\n    // 页面加载时间\r\n    const timing = performance?.timing;\r\n    if (timing?.loadEventEnd && timing?.navigationStart) {\r\n      metrics.loadTime = timing.loadEventEnd - timing.navigationStart;\r\n    }\r\n\r\n    // DNS解析时间\r\n    if (timing?.domainLookupEnd && timing?.domainLookupStart) {\r\n      metrics.dnsTime = timing.domainLookupEnd - timing.domainLookupStart;\r\n    }\r\n\r\n    // TCP连接时间\r\n    if (timing?.connectEnd && timing?.connectStart) {\r\n      metrics.tcpTime = timing.connectEnd - timing.connectStart;\r\n    }\r\n\r\n    // DOM解析时间\r\n    if (timing?.domComplete && timing?.domLoading) {\r\n      metrics.domParseTime = timing.domComplete - timing.domLoading;\r\n    }\r\n\r\n    // 首次绘制时间\r\n    const paintEntries = performance?.getEntriesByType?.(\"paint\") || [];\r\n    const [paint] = paintEntries;\r\n    if (paint?.startTime) {\r\n      metrics.firstPaintTime = paint.startTime;\r\n    }\r\n\r\n    // 首次内容绘制时间\r\n    const [fcp] = paintEntries;\r\n    if (fcp?.startTime) {\r\n      metrics.firstContentfulPaint = fcp.startTime;\r\n    }\r\n\r\n    // 最大内容绘制时间\r\n    const lcp =\r\n      performance?.getEntriesByType?.(\"largest-contentful-paint\") || [];\r\n    if (lcp?.[0]?.startTime) {\r\n      metrics.largestContentfulPaint = lcp[0].startTime;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"收集性能指标时发生错误:\", error);\r\n  }\r\n\r\n  return metrics;\r\n}\r\n"],"names":["dataStore","activeDataSets","deviceInfo","globalData","updateDataSet","id","key","callback","dataSet","getDataSet","recentClick","Map","initBehaviorTracking","dataSetId","stopClickTracking","handleClick","event","target","hasAttribute","parentElement","observerClickValue","getAttribute","now","Date","has","get","set","console","log","params","clickUploadData","JSON","parse","error","action","type","tagName","timestamp","position","x","clientX","y","clientY","concat","_toConsumableArray","arguments","length","undefined","document","addEventListener","removeEventListener","clear","trackClick","stopBehaviorTracking","Math","random","toString","substring","startTime","performanceMetrics","userActions","customData","createDataSet","metrics","_performance","_performance2","_performance2$getEntr","_performance3","_performance3$getEntr","_lcp$","timing","performance","loadEventEnd","navigationStart","loadTime","domainLookupEnd","domainLookupStart","dnsTime","connectEnd","connectStart","tcpTime","domComplete","domLoading","domParseTime","paintEntries","getEntriesByType","call","paint","_slicedToArray","firstPaintTime","fcp","firstContentfulPaint","lcp","largestContentfulPaint","collectPerformanceMetrics","data","deleteDataSet"],"mappings":"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"}